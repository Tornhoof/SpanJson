  
  
  
  
  
  
  
 
using System;
using BenchmarkDotNet.Attributes;
using SpanJson.Shared.Fixture;
namespace SpanJson.Benchmarks
{  
  // Autogenerated
  // ReSharper disable BuiltInTypeReferenceStyle
  [Config(typeof(MyConfig))]
  public class WriterBenchmark
  {
	private static readonly ExpressionTreeFixture ExpressionTreeFixture = new ExpressionTreeFixture();  
  
	private static readonly SByte SByteInput = ExpressionTreeFixture.Create<SByte>();
  
	private static readonly Int16 Int16Input = ExpressionTreeFixture.Create<Int16>();
  
	private static readonly Int32 Int32Input = ExpressionTreeFixture.Create<Int32>();
  
	private static readonly Int64 Int64Input = ExpressionTreeFixture.Create<Int64>();
  
	private static readonly Byte ByteInput = ExpressionTreeFixture.Create<Byte>();
  
	private static readonly UInt16 UInt16Input = ExpressionTreeFixture.Create<UInt16>();
  
	private static readonly UInt32 UInt32Input = ExpressionTreeFixture.Create<UInt32>();
  
	private static readonly UInt64 UInt64Input = ExpressionTreeFixture.Create<UInt64>();
  
	private static readonly Single SingleInput = ExpressionTreeFixture.Create<Single>();
  
	private static readonly Double DoubleInput = ExpressionTreeFixture.Create<Double>();
  
	private static readonly Boolean BooleanInput = ExpressionTreeFixture.Create<Boolean>();
  
	private static readonly Char CharInput = ExpressionTreeFixture.Create<Char>();
  
	private static readonly DateTime DateTimeInput = ExpressionTreeFixture.Create<DateTime>();
  
	private static readonly DateTimeOffset DateTimeOffsetInput = ExpressionTreeFixture.Create<DateTimeOffset>();
  
	private static readonly TimeSpan TimeSpanInput = ExpressionTreeFixture.Create<TimeSpan>();
  
	private static readonly Guid GuidInput = ExpressionTreeFixture.Create<Guid>();
  
	private static readonly String StringInput = ExpressionTreeFixture.Create<String>();
  
	private static readonly Decimal DecimalInput = ExpressionTreeFixture.Create<Decimal>();
  
	private static readonly Version VersionInput = ExpressionTreeFixture.Create<Version>();
  
	private static readonly Uri UriInput = ExpressionTreeFixture.Create<Uri>();
  
	[Benchmark]
	public void WriteSByteUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8SByte(SByteInput);
	}
  
	[Benchmark]
	public void WriteSByteUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16SByte(SByteInput);
	}
  
	[Benchmark]
	public void WriteInt16Utf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Int16(Int16Input);
	}
  
	[Benchmark]
	public void WriteInt16Utf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Int16(Int16Input);
	}
  
	[Benchmark]
	public void WriteInt32Utf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Int32(Int32Input);
	}
  
	[Benchmark]
	public void WriteInt32Utf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Int32(Int32Input);
	}
  
	[Benchmark]
	public void WriteInt64Utf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Int64(Int64Input);
	}
  
	[Benchmark]
	public void WriteInt64Utf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Int64(Int64Input);
	}
  
	[Benchmark]
	public void WriteByteUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Byte(ByteInput);
	}
  
	[Benchmark]
	public void WriteByteUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Byte(ByteInput);
	}
  
	[Benchmark]
	public void WriteUInt16Utf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8UInt16(UInt16Input);
	}
  
	[Benchmark]
	public void WriteUInt16Utf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16UInt16(UInt16Input);
	}
  
	[Benchmark]
	public void WriteUInt32Utf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8UInt32(UInt32Input);
	}
  
	[Benchmark]
	public void WriteUInt32Utf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16UInt32(UInt32Input);
	}
  
	[Benchmark]
	public void WriteUInt64Utf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8UInt64(UInt64Input);
	}
  
	[Benchmark]
	public void WriteUInt64Utf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16UInt64(UInt64Input);
	}
  
	[Benchmark]
	public void WriteSingleUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Single(SingleInput);
	}
  
	[Benchmark]
	public void WriteSingleUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Single(SingleInput);
	}
  
	[Benchmark]
	public void WriteDoubleUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Double(DoubleInput);
	}
  
	[Benchmark]
	public void WriteDoubleUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Double(DoubleInput);
	}
  
	[Benchmark]
	public void WriteBooleanUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Boolean(BooleanInput);
	}
  
	[Benchmark]
	public void WriteBooleanUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Boolean(BooleanInput);
	}
  
	[Benchmark]
	public void WriteCharUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Char(CharInput);
	}
  
	[Benchmark]
	public void WriteCharUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Char(CharInput);
	}
  
	[Benchmark]
	public void WriteDateTimeUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8DateTime(DateTimeInput);
	}
  
	[Benchmark]
	public void WriteDateTimeUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16DateTime(DateTimeInput);
	}
  
	[Benchmark]
	public void WriteDateTimeOffsetUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8DateTimeOffset(DateTimeOffsetInput);
	}
  
	[Benchmark]
	public void WriteDateTimeOffsetUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16DateTimeOffset(DateTimeOffsetInput);
	}
  
	[Benchmark]
	public void WriteTimeSpanUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8TimeSpan(TimeSpanInput);
	}
  
	[Benchmark]
	public void WriteTimeSpanUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16TimeSpan(TimeSpanInput);
	}
  
	[Benchmark]
	public void WriteGuidUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Guid(GuidInput);
	}
  
	[Benchmark]
	public void WriteGuidUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Guid(GuidInput);
	}
  
	[Benchmark]
	public void WriteStringUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8String(StringInput);
	}
  
	[Benchmark]
	public void WriteStringUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16String(StringInput);
	}
  
	[Benchmark]
	public void WriteDecimalUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Decimal(DecimalInput);
	}
  
	[Benchmark]
	public void WriteDecimalUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Decimal(DecimalInput);
	}
  
	[Benchmark]
	public void WriteVersionUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Version(VersionInput);
	}
  
	[Benchmark]
	public void WriteVersionUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Version(VersionInput);
	}
  
	[Benchmark]
	public void WriteUriUtf8()
	{
	    var writer = new JsonWriter<Byte>();
		writer.WriteUtf8Uri(UriInput);
	}
  
	[Benchmark]
	public void WriteUriUtf16()
	{
	    var writer = new JsonWriter<Char>();
		writer.WriteUtf16Uri(UriInput);
	}
 
  }
}
  