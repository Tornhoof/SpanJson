// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
using System;
using System.Runtime.CompilerServices;
namespace SpanJson
{
    public ref partial struct JsonReader<TSymbol> where TSymbol : struct
    {

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SByte ReadSByte()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16SByte();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8SByte();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int16 ReadInt16()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Int16();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Int16();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int32 ReadInt32()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Int32();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Int32();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Int64 ReadInt64()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Int64();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Int64();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Byte ReadByte()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Byte();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Byte();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UInt16 ReadUInt16()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16UInt16();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8UInt16();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UInt32 ReadUInt32()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16UInt32();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8UInt32();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public UInt64 ReadUInt64()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16UInt64();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8UInt64();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Single ReadSingle()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Single();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Single();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Double ReadDouble()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Double();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Double();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Decimal ReadDecimal()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Decimal();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Decimal();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Boolean ReadBoolean()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Boolean();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Boolean();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Char ReadChar()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Char();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Char();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public DateTime ReadDateTime()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16DateTime();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8DateTime();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public DateTimeOffset ReadDateTimeOffset()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16DateTimeOffset();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8DateTimeOffset();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TimeSpan ReadTimeSpan()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16TimeSpan();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8TimeSpan();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Guid ReadGuid()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Guid();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Guid();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public String ReadString()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16String();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8String();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Version ReadVersion()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Version();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Version();
            }
	    
            ThrowNotSupportedException();
            return default;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Uri ReadUri()
        {
            if (typeof(TSymbol) == typeof(char))
            {
                return ReadUtf16Uri();
            }
	    
            if (typeof(TSymbol) == typeof(byte))
            {
                return ReadUtf8Uri();
            }
	    
            ThrowNotSupportedException();
            return default;
        }
    }
}