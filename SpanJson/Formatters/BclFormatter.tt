<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
void GenerateListSerializeCode(string typeName, string utfName)
{
#>
            if (value == null)
            {
                writer.Write<#= utfName #>Null();
                return;
            }
            var valueLength = value.Count;
            writer.Write<#= utfName #>BeginArray();
            if (valueLength > 0)
            {
                ElementFormatter.Serialize(ref writer, value[0]);
                for (var i = 1; i < valueLength; i++)
                {
                    writer.Write<#= utfName #>ValueSeparator();
                    ElementFormatter.Serialize(ref writer, value[i]);
                }
            }

            writer.Write<#= utfName #>EndArray();
<#
}
void GenerateListDeserializeCode(string typeName, string utfName)
{
#>
            if (reader.Read<#= utfName #>IsNull())
            {
                return null;
            }
            reader.Read<#= utfName #>BeginArrayOrThrow();
            var list = new List<<#= typeName #>>();
            var count = 0;
            while (!reader.TryRead<#= utfName #>IsEndArrayOrValueSeparator(ref count))
            {
                list.Add(ElementFormatter.Deserialize(ref reader));
            }

            return list;
<#
}
void GenerateArraySerializeCode(string typeName, string utfName)
{
#>
            if (value == null)
            {
                writer.Write<#= utfName #>Null();
                return;
            }
            var valueLength = value.Length;
            writer.Write<#= utfName #>BeginArray();
            if (valueLength > 0)
            {
                ElementFormatter.Serialize(ref writer, value[0]);
                for (var i = 1; i < valueLength; i++)
                {
                    writer.Write<#= utfName #>ValueSeparator();
                    ElementFormatter.Serialize(ref writer, value[i]);
                }
            }

            writer.Write<#= utfName #>EndArray();
<#
}
void GenerateArrayDeserializeCode(string typeName, string utfName)
{
#>
            <#= typeName #>[] temp = null;
            <#= typeName #>[] result;
            try
            {
                temp = ArrayPool<<#= typeName #>>.Shared.Rent(4);
                reader.Read<#= utfName #>BeginArrayOrThrow();
                var count = 0;
                while (!reader.TryRead<#= utfName #>IsEndArrayOrValueSeparator(ref count)) // count is already preincremented, as it counts the separators
                {
                    if (count == temp.Length)
                    {
                        FormatterUtils.GrowArray(ref temp);
                    }

                    temp[count - 1] = ElementFormatter.Deserialize(ref reader);
                }

                if (count == 0)
                {
                    result = Array.Empty<<#= typeName #>>();
                }
                else
                {
                    result = FormatterUtils.CopyArray(temp, count);
                }
            }
            finally
            {
                if (temp != null)
                {
                    ArrayPool<<#= typeName #>>.Shared.Return(temp);
                }
            }

            return result;
<#
}
    var types = new[]
    {
        typeof(sbyte),
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(byte),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(decimal),
        typeof(bool),
        typeof(char),
        typeof(DateTime),
        typeof(DateTimeOffset),
        typeof(TimeSpan),
        typeof(Guid),
        typeof(string),
        typeof(Version),
        typeof(Uri)
    };
    var symbols = new []
    {
        typeof(char),
        typeof(byte),
    };
#>
using System;
using System.Collections.Generic;
using SpanJson.Helpers;
using System.Buffers;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Formatters
{
<# foreach(var t in types) {
   foreach(var symbol in symbols) {
    string utfName = null;
    if(symbol == typeof(char))
    {
        utfName = "Utf16";
    }
    else if(symbol == typeof(byte))
    {
        utfName = "Utf8";
    }
#>
    public sealed class <#= t.Name #><#= utfName #>Formatter : IJsonFormatter<<#= t.Name #>, <#= symbol.Name #>>
    {
        public static readonly <#= t.Name #><#= utfName #>Formatter Default = new <#= t.Name #><#= utfName #>Formatter();

        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, <#= t.Name #> value)
        {
<# if(!t.IsValueType) { #>
            if(value == null)
            {
                writer.Write<#= utfName #>Null();
                return;
            }
<# } #>
            writer.Write<#= utfName #><#= t.Name #>(value);
        }

        public <#= t.Name #> Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
            return reader.Read<#= utfName #><#= t.Name #>();
        }
    }
<# if(t.IsValueType) { #>
    public sealed class Nullable<#= t.Name #><#= utfName #>Formatter : IJsonFormatter<<#= t.Name #>?, <#= symbol.Name #>>
    {
        public static readonly Nullable<#= t.Name #><#= utfName #>Formatter Default = new Nullable<#= t.Name #><#= utfName #>Formatter();
        private static readonly <#= t.Name #><#= utfName #>Formatter ElementFormatter = <#= t.Name #><#= utfName #>Formatter.Default;
        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, <#= t.Name #>? value)
        {
            if (value == null)
            {
                writer.Write<#= utfName #>Null();
                return;
            }

            ElementFormatter.Serialize(ref writer, value.GetValueOrDefault());
        }

        public <#= t.Name #>? Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
            if (reader.Read<#= utfName #>IsNull())
            {
                return null;
            }

            return ElementFormatter.Deserialize(ref reader);
        }
    }

    public sealed class Nullable<#= t.Name #><#= utfName #>ArrayFormatter : IJsonFormatter<<#= t.Name #>?[], <#= symbol.Name #>>
    {
        public static readonly Nullable<#= t.Name #><#= utfName #>ArrayFormatter Default = new Nullable<#= t.Name #><#= utfName #>ArrayFormatter();
        private static readonly Nullable<#= t.Name #><#= utfName #>Formatter ElementFormatter = Nullable<#= t.Name #><#= utfName #>Formatter.Default;
        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, <#= t.Name #>?[] value)
        {
<#
            GenerateArraySerializeCode(t.Name+"?", utfName);
#>
        }

        public <#= t.Name #>?[] Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
<#
            GenerateArrayDeserializeCode(t.Name+"?", utfName);
#>
        }
    }

    public sealed class Nullable<#= t.Name #><#= utfName #>ListFormatter : IJsonFormatter<List<<#= t.Name #>?>, <#= symbol.Name #>>
    {
        public static readonly Nullable<#= t.Name #><#= utfName #>ListFormatter Default = new Nullable<#= t.Name #><#= utfName #>ListFormatter();
        private static readonly Nullable<#= t.Name #><#= utfName #>Formatter ElementFormatter = Nullable<#= t.Name #><#= utfName #>Formatter.Default;

        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, List<<#= t.Name #>?> value)
        {
<#
            GenerateListSerializeCode(t.Name+"?", utfName);
#>
        }

        public List<<#= t.Name #>?> Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
<#
            GenerateListDeserializeCode(t.Name+"?", utfName);
#>
        }
    }
<# } #>

    public sealed class <#= t.Name #><#= utfName #>ArrayFormatter : IJsonFormatter<<#= t.Name #>[], <#= symbol.Name #>>
    {
        public static readonly <#= t.Name #><#= utfName #>ArrayFormatter Default = new <#= t.Name #><#= utfName #>ArrayFormatter();
        private static readonly <#= t.Name #><#= utfName #>Formatter ElementFormatter = <#= t.Name #><#= utfName #>Formatter.Default;
        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, <#= t.Name #>[] value)
        {
<#
            GenerateArraySerializeCode(t.Name, utfName);
#>
        }

        public <#= t.Name #>[] Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
<#
            GenerateArrayDeserializeCode(t.Name, utfName);
#>
        }
    }

    public sealed class <#= t.Name #><#= utfName #>ListFormatter : IJsonFormatter<List<<#= t.Name #>>, <#= symbol.Name #>>
    {
        public static readonly <#= t.Name #><#= utfName #>ListFormatter Default = new <#= t.Name #><#= utfName #>ListFormatter();
        private static readonly <#= t.Name #><#= utfName #>Formatter ElementFormatter = <#= t.Name #><#= utfName #>Formatter.Default;

        public void Serialize(ref JsonWriter<<#= symbol.Name #>> writer, List<<#= t.Name #>> value)
        {
<#
            GenerateListSerializeCode(t.Name, utfName);
#>
        }

        public List<<#= t.Name #>> Deserialize(ref JsonReader<<#= symbol.Name #>> reader)
        {
<#
            GenerateListDeserializeCode(t.Name, utfName);
#>
        }
    }
<# } #>
<# } #>
}