    // Autogenerated
    // ReSharper disable BuiltInTypeReferenceStyle
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Runtime.CompilerServices;

    namespace SpanJson.Formatters
    {
        public sealed partial class DictionaryFormatter<TDictionary, TWritableDictionary, TKey, TValue, TSymbol, TResolver> : BaseFormatter,
        IJsonFormatter<TDictionary, TSymbol>
        where TResolver : IJsonFormatterResolver<TSymbol, TResolver>, new() where TSymbol : struct where TDictionary : IEnumerable<KeyValuePair<TKey, TValue>>
        {
            private static NameToKeyDelegate BuildIntegerNameToKeyDelegate()
            {
                if(typeof(TKey) == typeof(SByte))
                {
                    static TKey ParseSByte(string input)
                    {
                        var output = SByte.Parse(input, NumberStyles.Integer, CultureInfo.InvariantCulture);
                        return Unsafe.As<SByte, TKey>(ref output);
                    }
                    return ParseSByte;
                }
                if(typeof(TKey) == typeof(Int16))
                {
                    static TKey ParseInt16(string input)
                    {
                        var output = Int16.Parse(input, NumberStyles.Integer, CultureInfo.InvariantCulture);
                        return Unsafe.As<Int16, TKey>(ref output);
                    }
                    return ParseInt16;
                }
                if(typeof(TKey) == typeof(Int32))
                {
                    static TKey ParseInt32(string input)
                    {
                        var output = Int32.Parse(input, NumberStyles.Integer, CultureInfo.InvariantCulture);
                        return Unsafe.As<Int32, TKey>(ref output);
                    }
                    return ParseInt32;
                }
                if(typeof(TKey) == typeof(Int64))
                {
                    static TKey ParseInt64(string input)
                    {
                        var output = Int64.Parse(input, NumberStyles.Integer, CultureInfo.InvariantCulture);
                        return Unsafe.As<Int64, TKey>(ref output);
                    }
                    return ParseInt64;
                }
                if(typeof(TKey) == typeof(Byte))
                {
                    static TKey ParseByte(string input)
                    {
                        var output = Byte.Parse(input, NumberStyles.Integer, CultureInfo.InvariantCulture);
                        return Unsafe.As<Byte, TKey>(ref output);
                    }
                    return ParseByte;
                }
                if(typeof(TKey) == typeof(UInt16))
                {
                    static TKey ParseUInt16(string input)
                    {
                        var output = UInt16.Parse(input, NumberStyles.Integer, CultureInfo.InvariantCulture);
                        return Unsafe.As<UInt16, TKey>(ref output);
                    }
                    return ParseUInt16;
                }
                if(typeof(TKey) == typeof(UInt32))
                {
                    static TKey ParseUInt32(string input)
                    {
                        var output = UInt32.Parse(input, NumberStyles.Integer, CultureInfo.InvariantCulture);
                        return Unsafe.As<UInt32, TKey>(ref output);
                    }
                    return ParseUInt32;
                }
                if(typeof(TKey) == typeof(UInt64))
                {
                    static TKey ParseUInt64(string input)
                    {
                        var output = UInt64.Parse(input, NumberStyles.Integer, CultureInfo.InvariantCulture);
                        return Unsafe.As<UInt64, TKey>(ref output);
                    }
                    return ParseUInt64;
                }
                throw new NotSupportedException();
            }
            private static KeyToNameDelegate BuildIntegerKeyToNameDelegate()
            {
                if(typeof(TKey) == typeof(SByte))
                {
                    static string FormatSByte(TKey key)
                    {
                        var input = Unsafe.As<TKey, SByte>(ref key);
                        return input.ToString(CultureInfo.InvariantCulture);
                    }
                    return FormatSByte;
                }
                if(typeof(TKey) == typeof(Int16))
                {
                    static string FormatInt16(TKey key)
                    {
                        var input = Unsafe.As<TKey, Int16>(ref key);
                        return input.ToString(CultureInfo.InvariantCulture);
                    }
                    return FormatInt16;
                }
                if(typeof(TKey) == typeof(Int32))
                {
                    static string FormatInt32(TKey key)
                    {
                        var input = Unsafe.As<TKey, Int32>(ref key);
                        return input.ToString(CultureInfo.InvariantCulture);
                    }
                    return FormatInt32;
                }
                if(typeof(TKey) == typeof(Int64))
                {
                    static string FormatInt64(TKey key)
                    {
                        var input = Unsafe.As<TKey, Int64>(ref key);
                        return input.ToString(CultureInfo.InvariantCulture);
                    }
                    return FormatInt64;
                }
                if(typeof(TKey) == typeof(Byte))
                {
                    static string FormatByte(TKey key)
                    {
                        var input = Unsafe.As<TKey, Byte>(ref key);
                        return input.ToString(CultureInfo.InvariantCulture);
                    }
                    return FormatByte;
                }
                if(typeof(TKey) == typeof(UInt16))
                {
                    static string FormatUInt16(TKey key)
                    {
                        var input = Unsafe.As<TKey, UInt16>(ref key);
                        return input.ToString(CultureInfo.InvariantCulture);
                    }
                    return FormatUInt16;
                }
                if(typeof(TKey) == typeof(UInt32))
                {
                    static string FormatUInt32(TKey key)
                    {
                        var input = Unsafe.As<TKey, UInt32>(ref key);
                        return input.ToString(CultureInfo.InvariantCulture);
                    }
                    return FormatUInt32;
                }
                if(typeof(TKey) == typeof(UInt64))
                {
                    static string FormatUInt64(TKey key)
                    {
                        var input = Unsafe.As<TKey, UInt64>(ref key);
                        return input.ToString(CultureInfo.InvariantCulture);
                    }
                    return FormatUInt64;
                }
                throw new NotSupportedException();
            }
        }
    }
