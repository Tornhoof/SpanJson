<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\SpanJson.Shared\bin\Debug\netstandard2.0\SpanJson.Shared.dll" #>
<#@ assembly name="netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
  var types = new[]
  {
      typeof(char),
      typeof(DateTime),
      typeof(DateTimeOffset),
      typeof(TimeSpan),
      typeof(SpanJson.Shared.Polyfills.DateOnly),
      typeof(SpanJson.Shared.Polyfills.TimeOnly),
      typeof(Guid),
      typeof(string),
      typeof(Version),
      typeof(Uri)
  };
#>
using System;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Formatters.Dynamic
{
    public partial class SpanJsonDynamicString<TSymbol> : SpanJsonDynamic<TSymbol> where TSymbol : struct
    {
<# foreach(var t in types) { #>
        public static explicit operator <#= t.Name #>(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(<#= t.Name #>), input.Symbols, out var value))
            {
                return (<#= t.Name #>) value;
            }
            throw new InvalidCastException();
        }
<# if(t.IsValueType) { #>
        public static explicit operator <#= t.Name #>?(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(<#= t.Name #>?), input.Symbols, out var value))
            {
                return (<#= t.Name #>?) value;
            }
            throw new InvalidCastException();
        }
<# } #>
<# } #>
    }
}