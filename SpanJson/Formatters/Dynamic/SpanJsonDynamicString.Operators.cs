using System;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Formatters.Dynamic
{
    public partial class SpanJsonDynamicString<TSymbol> : SpanJsonDynamic<TSymbol> where TSymbol : struct
    {
        public static explicit operator Char(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(Char), input.Symbols, out var value) && value is Char output)
            {
                return output;
            }
            throw new InvalidCastException();
        }
        public static explicit operator DateTime(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(DateTime), input.Symbols, out var value) && value is DateTime output)
            {
                return output;
            }
            throw new InvalidCastException();
        }
        public static explicit operator DateTimeOffset(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(DateTimeOffset), input.Symbols, out var value) && value is DateTimeOffset output)
            {
                return output;
            }
            throw new InvalidCastException();
        }
        public static explicit operator TimeSpan(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(TimeSpan), input.Symbols, out var value) && value is TimeSpan output)
            {
                return output;
            }
            throw new InvalidCastException();
        }
        public static explicit operator Guid(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(Guid), input.Symbols, out var value) && value is Guid output)
            {
                return output;
            }
            throw new InvalidCastException();
        }
        public static explicit operator String(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(String), input.Symbols, out var value) && value is String output)
            {
                return output;
            }
            throw new InvalidCastException();
        }
        public static explicit operator Version(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(Version), input.Symbols, out var value) && value is Version output)
            {
                return output;
            }
            throw new InvalidCastException();
        }
        public static explicit operator Uri(SpanJsonDynamicString<TSymbol> input)
        {
            if (DynamicConverter.TryConvertTo(typeof(Uri), input.Symbols, out var value) && value is Uri output)
            {
                return output;
            }
            throw new InvalidCastException();
        }
    }
}