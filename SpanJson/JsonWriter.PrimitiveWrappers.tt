<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(sbyte),
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(byte),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(decimal),
        typeof(bool),
        typeof(char),
        typeof(DateTime),
        typeof(DateTimeOffset),
        typeof(TimeSpan),
        typeof(Guid),
        typeof(string),
        typeof(Version),
        typeof(Uri)
    };
#>
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
using System;
using System.Runtime.CompilerServices;
namespace SpanJson
{
    public ref partial struct JsonWriter<TSymbol> where TSymbol : struct
    {
<# foreach(var t in types) { #>

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Write<#= t.Name #>(<#= t.Name #> value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16<#= t.Name #>(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8<#= t.Name #>(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }
<# } #>
    }
}