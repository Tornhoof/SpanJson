// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
using System;
using System.Runtime.CompilerServices;
namespace SpanJson
{
    public ref partial struct JsonWriter<TSymbol> where TSymbol : struct
    {

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteSByte(SByte value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16SByte(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8SByte(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteInt16(Int16 value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Int16(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Int16(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteInt32(Int32 value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Int32(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Int32(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteInt64(Int64 value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Int64(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Int64(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteByte(Byte value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Byte(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Byte(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteUInt16(UInt16 value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16UInt16(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8UInt16(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteUInt32(UInt32 value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16UInt32(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8UInt32(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteUInt64(UInt64 value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16UInt64(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8UInt64(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteSingle(Single value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Single(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Single(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteDouble(Double value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Double(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Double(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteDecimal(Decimal value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Decimal(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Decimal(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteBoolean(Boolean value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Boolean(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Boolean(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteChar(Char value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Char(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Char(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteDateTime(DateTime value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16DateTime(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8DateTime(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteDateTimeOffset(DateTimeOffset value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16DateTimeOffset(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8DateTimeOffset(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteTimeSpan(TimeSpan value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16TimeSpan(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8TimeSpan(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteGuid(Guid value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Guid(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Guid(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteString(String value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16String(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8String(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteVersion(Version value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Version(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Version(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void WriteUri(Uri value)
        {
            if (typeof(TSymbol) == typeof(char))
            {
                WriteUtf16Uri(value);
            }
            else if (typeof(TSymbol) == typeof(byte))
            {
                WriteUtf8Uri(value);
            }
            else
            {
                ThrowNotSupportedException();
            }
        }
    }
}