// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
using System;
using System.Buffers;
namespace SpanJson.Helpers
{
    public static partial class FormatterUtils
	{
		public static void Grow(ref SByte[] array)
		{
			var backup = array;
			array = ArrayPool<SByte>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(SByte));
			ArrayPool<SByte>.Shared.Return(backup);
		}
		public static void Grow(ref Int16[] array)
		{
			var backup = array;
			array = ArrayPool<Int16>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Int16));
			ArrayPool<Int16>.Shared.Return(backup);
		}
		public static void Grow(ref Int32[] array)
		{
			var backup = array;
			array = ArrayPool<Int32>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Int32));
			ArrayPool<Int32>.Shared.Return(backup);
		}
		public static void Grow(ref Int64[] array)
		{
			var backup = array;
			array = ArrayPool<Int64>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Int64));
			ArrayPool<Int64>.Shared.Return(backup);
		}
		public static void Grow(ref Byte[] array)
		{
			var backup = array;
			array = ArrayPool<Byte>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Byte));
			ArrayPool<Byte>.Shared.Return(backup);
		}
		public static void Grow(ref UInt16[] array)
		{
			var backup = array;
			array = ArrayPool<UInt16>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(UInt16));
			ArrayPool<UInt16>.Shared.Return(backup);
		}
		public static void Grow(ref UInt32[] array)
		{
			var backup = array;
			array = ArrayPool<UInt32>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(UInt32));
			ArrayPool<UInt32>.Shared.Return(backup);
		}
		public static void Grow(ref UInt64[] array)
		{
			var backup = array;
			array = ArrayPool<UInt64>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(UInt64));
			ArrayPool<UInt64>.Shared.Return(backup);
		}
		public static void Grow(ref Single[] array)
		{
			var backup = array;
			array = ArrayPool<Single>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Single));
			ArrayPool<Single>.Shared.Return(backup);
		}
		public static void Grow(ref Double[] array)
		{
			var backup = array;
			array = ArrayPool<Double>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Double));
			ArrayPool<Double>.Shared.Return(backup);
		}
		public static void Grow(ref Decimal[] array)
		{
			var backup = array;
			array = ArrayPool<Decimal>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Decimal));
			ArrayPool<Decimal>.Shared.Return(backup);
		}
		public static void Grow(ref Boolean[] array)
		{
			var backup = array;
			array = ArrayPool<Boolean>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Boolean));
			ArrayPool<Boolean>.Shared.Return(backup);
		}
		public static void Grow(ref Char[] array)
		{
			var backup = array;
			array = ArrayPool<Char>.Shared.Rent(backup.Length * 2);
			Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Char));
			ArrayPool<Char>.Shared.Return(backup);
		}
    }
}