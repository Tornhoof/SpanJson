// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
using System;
using System.Buffers;
namespace SpanJson.Helpers
{
    public static partial class FormatterUtils
    {
        public static void GrowArray(ref SByte[] array)
        {
            var backup = array;
            array = ArrayPool<SByte>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(SByte));
            ArrayPool<SByte>.Shared.Return(backup);
        }

        public static SByte[] CopyArray(SByte[] array, int count)
        {
            var result = new SByte[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(SByte));
            return result;
        }

        public static void GrowArray(ref Int16[] array)
        {
            var backup = array;
            array = ArrayPool<Int16>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Int16));
            ArrayPool<Int16>.Shared.Return(backup);
        }

        public static Int16[] CopyArray(Int16[] array, int count)
        {
            var result = new Int16[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(Int16));
            return result;
        }

        public static void GrowArray(ref Int32[] array)
        {
            var backup = array;
            array = ArrayPool<Int32>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Int32));
            ArrayPool<Int32>.Shared.Return(backup);
        }

        public static Int32[] CopyArray(Int32[] array, int count)
        {
            var result = new Int32[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(Int32));
            return result;
        }

        public static void GrowArray(ref Int64[] array)
        {
            var backup = array;
            array = ArrayPool<Int64>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Int64));
            ArrayPool<Int64>.Shared.Return(backup);
        }

        public static Int64[] CopyArray(Int64[] array, int count)
        {
            var result = new Int64[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(Int64));
            return result;
        }

        public static void GrowArray(ref Byte[] array)
        {
            var backup = array;
            array = ArrayPool<Byte>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Byte));
            ArrayPool<Byte>.Shared.Return(backup);
        }

        public static Byte[] CopyArray(Byte[] array, int count)
        {
            var result = new Byte[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(Byte));
            return result;
        }

        public static void GrowArray(ref UInt16[] array)
        {
            var backup = array;
            array = ArrayPool<UInt16>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(UInt16));
            ArrayPool<UInt16>.Shared.Return(backup);
        }

        public static UInt16[] CopyArray(UInt16[] array, int count)
        {
            var result = new UInt16[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(UInt16));
            return result;
        }

        public static void GrowArray(ref UInt32[] array)
        {
            var backup = array;
            array = ArrayPool<UInt32>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(UInt32));
            ArrayPool<UInt32>.Shared.Return(backup);
        }

        public static UInt32[] CopyArray(UInt32[] array, int count)
        {
            var result = new UInt32[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(UInt32));
            return result;
        }

        public static void GrowArray(ref UInt64[] array)
        {
            var backup = array;
            array = ArrayPool<UInt64>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(UInt64));
            ArrayPool<UInt64>.Shared.Return(backup);
        }

        public static UInt64[] CopyArray(UInt64[] array, int count)
        {
            var result = new UInt64[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(UInt64));
            return result;
        }

        public static void GrowArray(ref Single[] array)
        {
            var backup = array;
            array = ArrayPool<Single>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Single));
            ArrayPool<Single>.Shared.Return(backup);
        }

        public static Single[] CopyArray(Single[] array, int count)
        {
            var result = new Single[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(Single));
            return result;
        }

        public static void GrowArray(ref Double[] array)
        {
            var backup = array;
            array = ArrayPool<Double>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Double));
            ArrayPool<Double>.Shared.Return(backup);
        }

        public static Double[] CopyArray(Double[] array, int count)
        {
            var result = new Double[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(Double));
            return result;
        }

        public static void GrowArray(ref Boolean[] array)
        {
            var backup = array;
            array = ArrayPool<Boolean>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Boolean));
            ArrayPool<Boolean>.Shared.Return(backup);
        }

        public static Boolean[] CopyArray(Boolean[] array, int count)
        {
            var result = new Boolean[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(Boolean));
            return result;
        }

        public static void GrowArray(ref Char[] array)
        {
            var backup = array;
            array = ArrayPool<Char>.Shared.Rent(backup.Length * 2);
            Buffer.BlockCopy(backup, 0, array, 0, backup.Length * sizeof(Char));
            ArrayPool<Char>.Shared.Return(backup);
        }

        public static Char[] CopyArray(Char[] array, int count)
        {
            var result = new Char[count];
            Buffer.BlockCopy(array, 0, result, 0, count * sizeof(Char));
            return result;
        }

    }
}