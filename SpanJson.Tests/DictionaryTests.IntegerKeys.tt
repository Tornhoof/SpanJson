<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(sbyte),
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(byte),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
    };
#>
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
// ReSharper disable InconsistentNaming
using System;
using System.Collections.Generic;
using System.Text;
using Xunit;
namespace SpanJson.Tests
{
    public partial class DictionaryTests
    {
<# foreach(var t in types) {  #>
        
        [Fact]
        public void SerializeDeserialize<#= t.Name #>KeysUtf16()
        {
            var input = new Dictionary<<#= t.Name #>, string>();
            for(<#= t.Name #> i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            for(<#= t.Name #> i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", serialized);
            }
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Dictionary<<#= t.Name #>, string>>(serialized);
            Assert.Equal(input, deserialized);
        }
                
        [Fact]
        public void SerializeDeserialize<#= t.Name #>KeysUtf8()
        {
            var input = new Dictionary<<#= t.Name #>, string>();
            for(<#= t.Name #> i = 0;i<10;i++)
            {
                input.Add(i, "Hello World"+i);
            }
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var encodedString = Encoding.UTF8.GetString(serialized);
            for(<#= t.Name #> i = 0;i<10;i++)
            {
                Assert.Contains($"\"{i}\":\"Hello World{i}\"", encodedString);
            }
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Dictionary<<#= t.Name #>, string>>(serialized);
            Assert.Equal(input, deserialized);
        }

<#}#>
    }
}