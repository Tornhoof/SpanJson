<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
namespace SpanJson.Tests
{
    // Autogenerated
    // ReSharper disable BuiltInTypeReferenceStyle
    // ReSharper disable InconsistentNaming
    public partial class JsonWriterPropertyNameLengthTests
    {
        public class PropertyNameLengths : IEquatable<PropertyNameLengths>
        {
<#
        var propertyName = string.Empty;
        for(int i = 0; i<=50;i++)
        {
            propertyName += (char) (i%26 + 'a');
#>
            public int <#=propertyName#> {get;set;}

<#
        }
#>
            public override bool Equals(object obj)
            {
                if (ReferenceEquals(null, obj)) return false;
                if (ReferenceEquals(this, obj)) return true;
                if (obj.GetType() != this.GetType()) return false;
                return Equals((PropertyNameLengths) obj);
            }
            public override int GetHashCode()
            {
                return 0; // performance is not relevant here
            }
            public bool Equals(PropertyNameLengths other)
            {
<#
        var equalityPropertyName = string.Empty;
        for(int i = 0; i<=50;i++)
        {
            equalityPropertyName += (char) (i%26 + 'a');
#>
                if(<#=equalityPropertyName#> != other.<#=equalityPropertyName#>)
                {
                    return false;
                }

<#
        }
#>              return true;
            }
        }
    }
}