using System;
using System.Collections.Generic;
using SpanJson;
using SpanJson.Tests;
using Xunit;
// Autogenerated
// ReSharper disable BuiltInTypeReferenceStyle
namespace SpanJson.Tests.Generated
{
           
    public partial class NullableSByteListTests : NullableListTestBase<SByte>
    {
    }

    public partial class NullableSByteArrayTests : NullableArrayTestBase<SByte>
    {
    }
    public partial class SByteTests : StructTestBase<SByte>
    {
        [Theory]
        [InlineData(SByte.MinValue)]
        [InlineData(SByte.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(SByte input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<SByte>(serialized);
            Assert.Equal(input, deserialized);
        }


        [Theory]
        [InlineData(SByte.MinValue)]
        [InlineData(SByte.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(SByte input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<SByte>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<SByte>();
            var writer = new JsonWriter<byte>();
            writer.WriteSByte(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadSByte();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<SByte>();
            var writer = new JsonWriter<char>();
            writer.WriteSByte(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadSByte();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class SByteListTests : ListTestBase<SByte>
    {
    }

    public partial class SByteArrayTests : ArrayTestBase<SByte>
    {
    }
           
    public partial class NullableInt16ListTests : NullableListTestBase<Int16>
    {
    }

    public partial class NullableInt16ArrayTests : NullableArrayTestBase<Int16>
    {
    }
    public partial class Int16Tests : StructTestBase<Int16>
    {
        [Theory]
        [InlineData(Int16.MinValue)]
        [InlineData(Int16.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(Int16 input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Int16>(serialized);
            Assert.Equal(input, deserialized);
        }


        [Theory]
        [InlineData(Int16.MinValue)]
        [InlineData(Int16.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(Int16 input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Int16>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Int16>();
            var writer = new JsonWriter<byte>();
            writer.WriteInt16(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadInt16();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Int16>();
            var writer = new JsonWriter<char>();
            writer.WriteInt16(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadInt16();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class Int16ListTests : ListTestBase<Int16>
    {
    }

    public partial class Int16ArrayTests : ArrayTestBase<Int16>
    {
    }
           
    public partial class NullableInt32ListTests : NullableListTestBase<Int32>
    {
    }

    public partial class NullableInt32ArrayTests : NullableArrayTestBase<Int32>
    {
    }
    public partial class Int32Tests : StructTestBase<Int32>
    {
        [Theory]
        [InlineData(Int32.MinValue)]
        [InlineData(Int32.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(Int32 input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Int32>(serialized);
            Assert.Equal(input, deserialized);
        }


        [Theory]
        [InlineData(Int32.MinValue)]
        [InlineData(Int32.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(Int32 input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Int32>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Int32>();
            var writer = new JsonWriter<byte>();
            writer.WriteInt32(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadInt32();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Int32>();
            var writer = new JsonWriter<char>();
            writer.WriteInt32(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadInt32();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class Int32ListTests : ListTestBase<Int32>
    {
    }

    public partial class Int32ArrayTests : ArrayTestBase<Int32>
    {
    }
           
    public partial class NullableInt64ListTests : NullableListTestBase<Int64>
    {
    }

    public partial class NullableInt64ArrayTests : NullableArrayTestBase<Int64>
    {
    }
    public partial class Int64Tests : StructTestBase<Int64>
    {
        [Theory]
        [InlineData(Int64.MinValue)]
        [InlineData(Int64.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(Int64 input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Int64>(serialized);
            Assert.Equal(input, deserialized);
        }


        [Theory]
        [InlineData(Int64.MinValue)]
        [InlineData(Int64.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(Int64 input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Int64>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Int64>();
            var writer = new JsonWriter<byte>();
            writer.WriteInt64(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadInt64();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Int64>();
            var writer = new JsonWriter<char>();
            writer.WriteInt64(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadInt64();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class Int64ListTests : ListTestBase<Int64>
    {
    }

    public partial class Int64ArrayTests : ArrayTestBase<Int64>
    {
    }
           
    public partial class NullableByteListTests : NullableListTestBase<Byte>
    {
    }

    public partial class NullableByteArrayTests : NullableArrayTestBase<Byte>
    {
    }
    public partial class ByteTests : StructTestBase<Byte>
    {
        [Theory]
        [InlineData(Byte.MinValue)]
        [InlineData(Byte.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(Byte input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Byte>(serialized);
            Assert.Equal(input, deserialized);
        }


        [Theory]
        [InlineData(Byte.MinValue)]
        [InlineData(Byte.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(Byte input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Byte>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Byte>();
            var writer = new JsonWriter<byte>();
            writer.WriteByte(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadByte();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Byte>();
            var writer = new JsonWriter<char>();
            writer.WriteByte(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadByte();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class ByteListTests : ListTestBase<Byte>
    {
    }

    public partial class ByteArrayTests : ArrayTestBase<Byte>
    {
    }
           
    public partial class NullableUInt16ListTests : NullableListTestBase<UInt16>
    {
    }

    public partial class NullableUInt16ArrayTests : NullableArrayTestBase<UInt16>
    {
    }
    public partial class UInt16Tests : StructTestBase<UInt16>
    {
        [Theory]
        [InlineData(UInt16.MinValue)]
        [InlineData(UInt16.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(UInt16 input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<UInt16>(serialized);
            Assert.Equal(input, deserialized);
        }


        [Theory]
        [InlineData(UInt16.MinValue)]
        [InlineData(UInt16.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(UInt16 input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<UInt16>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<UInt16>();
            var writer = new JsonWriter<byte>();
            writer.WriteUInt16(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadUInt16();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<UInt16>();
            var writer = new JsonWriter<char>();
            writer.WriteUInt16(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadUInt16();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class UInt16ListTests : ListTestBase<UInt16>
    {
    }

    public partial class UInt16ArrayTests : ArrayTestBase<UInt16>
    {
    }
           
    public partial class NullableUInt32ListTests : NullableListTestBase<UInt32>
    {
    }

    public partial class NullableUInt32ArrayTests : NullableArrayTestBase<UInt32>
    {
    }
    public partial class UInt32Tests : StructTestBase<UInt32>
    {
        [Theory]
        [InlineData(UInt32.MinValue)]
        [InlineData(UInt32.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(UInt32 input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<UInt32>(serialized);
            Assert.Equal(input, deserialized);
        }


        [Theory]
        [InlineData(UInt32.MinValue)]
        [InlineData(UInt32.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(UInt32 input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<UInt32>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<UInt32>();
            var writer = new JsonWriter<byte>();
            writer.WriteUInt32(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadUInt32();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<UInt32>();
            var writer = new JsonWriter<char>();
            writer.WriteUInt32(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadUInt32();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class UInt32ListTests : ListTestBase<UInt32>
    {
    }

    public partial class UInt32ArrayTests : ArrayTestBase<UInt32>
    {
    }
           
    public partial class NullableUInt64ListTests : NullableListTestBase<UInt64>
    {
    }

    public partial class NullableUInt64ArrayTests : NullableArrayTestBase<UInt64>
    {
    }
    public partial class UInt64Tests : StructTestBase<UInt64>
    {
        [Theory]
        [InlineData(UInt64.MinValue)]
        [InlineData(UInt64.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(UInt64 input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<UInt64>(serialized);
            Assert.Equal(input, deserialized);
        }


        [Theory]
        [InlineData(UInt64.MinValue)]
        [InlineData(UInt64.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(UInt64 input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<UInt64>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<UInt64>();
            var writer = new JsonWriter<byte>();
            writer.WriteUInt64(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadUInt64();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<UInt64>();
            var writer = new JsonWriter<char>();
            writer.WriteUInt64(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadUInt64();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class UInt64ListTests : ListTestBase<UInt64>
    {
    }

    public partial class UInt64ArrayTests : ArrayTestBase<UInt64>
    {
    }
           
    public partial class NullableSingleListTests : NullableListTestBase<Single>
    {
    }

    public partial class NullableSingleArrayTests : NullableArrayTestBase<Single>
    {
    }
    public partial class SingleTests : StructTestBase<Single>
    {

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Single>();
            var writer = new JsonWriter<byte>();
            writer.WriteSingle(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadSingle();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Single>();
            var writer = new JsonWriter<char>();
            writer.WriteSingle(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadSingle();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class SingleListTests : ListTestBase<Single>
    {
    }

    public partial class SingleArrayTests : ArrayTestBase<Single>
    {
    }
           
    public partial class NullableDoubleListTests : NullableListTestBase<Double>
    {
    }

    public partial class NullableDoubleArrayTests : NullableArrayTestBase<Double>
    {
    }
    public partial class DoubleTests : StructTestBase<Double>
    {

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Double>();
            var writer = new JsonWriter<byte>();
            writer.WriteDouble(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDouble();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Double>();
            var writer = new JsonWriter<char>();
            writer.WriteDouble(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDouble();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class DoubleListTests : ListTestBase<Double>
    {
    }

    public partial class DoubleArrayTests : ArrayTestBase<Double>
    {
    }
           
    public partial class NullableDecimalListTests : NullableListTestBase<Decimal>
    {
    }

    public partial class NullableDecimalArrayTests : NullableArrayTestBase<Decimal>
    {
    }
    public partial class DecimalTests : StructTestBase<Decimal>
    {

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Decimal>();
            var writer = new JsonWriter<byte>();
            writer.WriteDecimal(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDecimal();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Decimal>();
            var writer = new JsonWriter<char>();
            writer.WriteDecimal(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDecimal();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class DecimalListTests : ListTestBase<Decimal>
    {
    }

    public partial class DecimalArrayTests : ArrayTestBase<Decimal>
    {
    }
           
    public partial class NullableBooleanListTests : NullableListTestBase<Boolean>
    {
    }

    public partial class NullableBooleanArrayTests : NullableArrayTestBase<Boolean>
    {
    }
    public partial class BooleanTests : StructTestBase<Boolean>
    {

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Boolean>();
            var writer = new JsonWriter<byte>();
            writer.WriteBoolean(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadBoolean();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Boolean>();
            var writer = new JsonWriter<char>();
            writer.WriteBoolean(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadBoolean();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class BooleanListTests : ListTestBase<Boolean>
    {
    }

    public partial class BooleanArrayTests : ArrayTestBase<Boolean>
    {
    }
           
    public partial class NullableCharListTests : NullableListTestBase<Char>
    {
    }

    public partial class NullableCharArrayTests : NullableArrayTestBase<Char>
    {
    }
    public partial class CharTests : StructTestBase<Char>
    {
        [Theory]
        [InlineData(Char.MinValue)]
        [InlineData(Char.MaxValue)]
        public void SerializeDeserializeMinMaxUtf8(Char input)
        {
            var serialized = JsonSerializer.Generic.Utf8.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf8.Deserialize<Char>(serialized);
            Assert.Equal(input, deserialized);
        }


        [Theory]
        [InlineData(Char.MinValue)]
        [InlineData(Char.MaxValue)]
        public void SerializeDeserializeMinMaxUtf16(Char input)
        {
            var serialized = JsonSerializer.Generic.Utf16.Serialize(input);
            var deserialized = JsonSerializer.Generic.Utf16.Deserialize<Char>(serialized);
            Assert.Equal(input, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Char>();
            var writer = new JsonWriter<byte>();
            writer.WriteChar(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadChar();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Char>();
            var writer = new JsonWriter<char>();
            writer.WriteChar(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadChar();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class CharListTests : ListTestBase<Char>
    {
    }

    public partial class CharArrayTests : ArrayTestBase<Char>
    {
    }
           
    public partial class NullableDateTimeListTests : NullableListTestBase<DateTime>
    {
    }

    public partial class NullableDateTimeArrayTests : NullableArrayTestBase<DateTime>
    {
    }
    public partial class DateTimeTests : StructTestBase<DateTime>
    {

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<DateTime>();
            var writer = new JsonWriter<byte>();
            writer.WriteDateTime(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDateTime();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<DateTime>();
            var writer = new JsonWriter<char>();
            writer.WriteDateTime(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDateTime();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class DateTimeListTests : ListTestBase<DateTime>
    {
    }

    public partial class DateTimeArrayTests : ArrayTestBase<DateTime>
    {
    }
           
    public partial class NullableDateTimeOffsetListTests : NullableListTestBase<DateTimeOffset>
    {
    }

    public partial class NullableDateTimeOffsetArrayTests : NullableArrayTestBase<DateTimeOffset>
    {
    }
    public partial class DateTimeOffsetTests : StructTestBase<DateTimeOffset>
    {

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<DateTimeOffset>();
            var writer = new JsonWriter<byte>();
            writer.WriteDateTimeOffset(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadDateTimeOffset();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<DateTimeOffset>();
            var writer = new JsonWriter<char>();
            writer.WriteDateTimeOffset(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadDateTimeOffset();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class DateTimeOffsetListTests : ListTestBase<DateTimeOffset>
    {
    }

    public partial class DateTimeOffsetArrayTests : ArrayTestBase<DateTimeOffset>
    {
    }
           
    public partial class NullableTimeSpanListTests : NullableListTestBase<TimeSpan>
    {
    }

    public partial class NullableTimeSpanArrayTests : NullableArrayTestBase<TimeSpan>
    {
    }
    public partial class TimeSpanTests : StructTestBase<TimeSpan>
    {

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<TimeSpan>();
            var writer = new JsonWriter<byte>();
            writer.WriteTimeSpan(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadTimeSpan();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<TimeSpan>();
            var writer = new JsonWriter<char>();
            writer.WriteTimeSpan(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadTimeSpan();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class TimeSpanListTests : ListTestBase<TimeSpan>
    {
    }

    public partial class TimeSpanArrayTests : ArrayTestBase<TimeSpan>
    {
    }
           
    public partial class NullableGuidListTests : NullableListTestBase<Guid>
    {
    }

    public partial class NullableGuidArrayTests : NullableArrayTestBase<Guid>
    {
    }
    public partial class GuidTests : StructTestBase<Guid>
    {

        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Guid>();
            var writer = new JsonWriter<byte>();
            writer.WriteGuid(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadGuid();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Guid>();
            var writer = new JsonWriter<char>();
            writer.WriteGuid(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadGuid();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class GuidListTests : ListTestBase<Guid>
    {
    }

    public partial class GuidArrayTests : ArrayTestBase<Guid>
    {
    }
    public partial class StringTests : ClassTestBase<String>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<String>();
            var writer = new JsonWriter<byte>();
            writer.WriteString(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadString();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<String>();
            var writer = new JsonWriter<char>();
            writer.WriteString(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadString();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class StringListTests : ListTestBase<String>
    {
    }

    public partial class StringArrayTests : ArrayTestBase<String>
    {
    }
    public partial class VersionTests : ClassTestBase<Version>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Version>();
            var writer = new JsonWriter<byte>();
            writer.WriteVersion(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadVersion();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Version>();
            var writer = new JsonWriter<char>();
            writer.WriteVersion(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadVersion();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class VersionListTests : ListTestBase<Version>
    {
    }

    public partial class VersionArrayTests : ArrayTestBase<Version>
    {
    }
    public partial class UriTests : ClassTestBase<Uri>
    {
        [Fact]
        public void PrimitiveWrapperUtf8()
        {
            var value = Fixture.Create<Uri>();
            var writer = new JsonWriter<byte>();
            writer.WriteUri(value);
            var output = writer.ToByteArray();

            var reader = new JsonReader<byte>(output);
            var deserialized = reader.ReadUri();
            Assert.Equal(value, deserialized);
        }

        [Fact]
        public void PrimitiveWrapperUtf16()
        {
            var value = Fixture.Create<Uri>();
            var writer = new JsonWriter<char>();
            writer.WriteUri(value);
            var output = writer.ToString();

            var reader = new JsonReader<char>(output);
            var deserialized = reader.ReadUri();
            Assert.Equal(value, deserialized);
        }
    }
    public partial class UriListTests : ListTestBase<Uri>
    {
    }

    public partial class UriArrayTests : ArrayTestBase<Uri>
    {
    }
}